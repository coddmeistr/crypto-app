name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - backend/dev

env:
  REGISTRY: "registry.gitlab.com/apps6412746/crypto-app"

  ACCOUNT_IMAGE_NAME: "account-image"
  ACCOUNT_CONTAINER_NAME: "account"
  ACCOUNT_PORT: "8080"

  CRYPTO_IMAGE_NAME: "crypto-image"
  CRYPTO_CONTAINER_NAME: "crypto"
  CRYPTO_PORT: "8181"

  GATEWAY_IMAGE_NAME: "gateway-image"
  GATEWAY_CONTAINER_NAME: "gateway"
  GATEWAY_PORT: "8282"

  POSTGRES_DB: "db"
  POSTGRES_USER: "admin"
  POSTGRES_PASSWORD: "root"
  PGDATA: "/pg-data"
  POSTGRES_CONNECTION_STRING: "postgres://admin:root@postgres_container:5432/db"

  NETWORK_NAME: "crypto-app-network"

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout backend/dev
        uses: actions/checkout@v2

      - name: Build container images
        run: |
          docker build -t $(echo $REGISTRY)/$(echo $ACCOUNT_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) ./account
          docker build -t $(echo $REGISTRY)/$(echo $CRYPTO_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) ./crypto
          docker build -t $(echo $REGISTRY)/$(echo $GATEWAY_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) ./gateway

      - name: Log in to GitLab Container Registry with short-lived credentials
        run: docker login -u ${{ secrets.GITLAB_USERNAME }} -p ${{ secrets.GITLAB_PASSWORD }} $(echo $REGISTRY)

      - name: Push images to Gitlab Registry
        run: |
          docker push $(echo $REGISTRY)/$(echo $ACCOUNT_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
          docker push $(echo $REGISTRY)/$(echo $CRYPTO_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
          docker push $(echo $REGISTRY)/$(echo $GATEWAY_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: NETWORK_NAME,ACCOUNT_IMAGE_NAME,CRYPTO_IMAGE_NAME,GATEWAY_IMAGE_NAME,REGISTRY,GITHUB_SHA,ACCOUNT_CONTAINER_NAME,CRYPTO_CONTAINER_NAME,GATEWAY_CONTAINER_NAME,POSTGRES_DB,POSTGRES_USER,POSTGRES_PASSWORD,PGDATA,POSTGRES_CONNECTION_STRING,ACCOUNT_PORT,CRYPTO_PORT,GATEWAY_PORT
          script: |
            # Login into Digital Ocean Registry
            docker login -u ${{ secrets.GITLAB_USERNAME }} -p ${{ secrets.GITLAB_PASSWORD }} $(echo $REGISTRY)

            # Creating new network for docker containers
            docker network create $(echo $NETWORK_NAME)

            # Stop running containers
            docker stop postgres_container
            docker stop $(echo $ACCOUNT_CONTAINER_NAME)
            docker stop $(echo $CRYPTO_CONTAINER_NAME)
            docker stop $(echo $GATEWAY_CONTAINER_NAME)

            # Remove old containers
            docker rm postgres_container
            docker rm $(echo $ACCOUNT_CONTAINER_NAME)
            docker rm $(echo $CRYPTO_CONTAINER_NAME)
            docker rm $(echo $GATEWAY_CONTAINER_NAME)

            # Remove old images DELETING ALL IMAGES, UNSAFE, REWRITE
            docker rmi -f $(docker images -aq)
    
            # Set env variables
            export CRYPTO_COMPARE_KEY=${{ secrets.CRYPTO_COMPARE_KEY }}

            # Run postgres
            sudo docker run --user $(id -u):$(id -g) -e POSTGRES_DB=$(echo $POSTGRES_DB) -e POSTGRES_USER=$(echo $POSTGRES_USER) -e POSTGRES_PASSWORD=$(echo $POSTGRES_PASSWORD) -e PGDATA=$(echo $PGDATA) -d \
            -v pg-data:/pg-data \
            --name postgres_container \
            --publish 5432:5432 \
            --restart always \
            --network $(echo $NETWORK_NAME) \
            postgres:16.0

            # Run containers
            docker run -e DB_CONNECTION_STRING=$(echo $POSTGRES_CONNECTION_STRING) -e CRYPTO_SERVICE_HOST=$(echo $CRYPTO_CONTAINER_NAME):$(echo $CRYPTO_PORT) -d \
            --restart always \
            --publish $(echo $ACCOUNT_PORT):$(echo $ACCOUNT_PORT) \
            --name $(echo $ACCOUNT_CONTAINER_NAME) \
            --network $(echo $NETWORK_NAME) \
            $(echo $REGISTRY)/$(echo $ACCOUNT_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

            docker run -e CRYPTO_COMPARE_KEY -d \
            --restart always \
            --publish $(echo $CRYPTO_PORT):$(echo $CRYPTO_PORT) \
            --name $(echo $CRYPTO_CONTAINER_NAME) \
            --network $(echo $NETWORK_NAME) \
            $(echo $REGISTRY)/$(echo $CRYPTO_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

            docker run -e CRYPTO_SERVICE_HOST=$(echo $CRYPTO_CONTAINER_NAME):$(echo $CRYPTO_PORT) -e ACCOUNT_SERVICE_HOST=$(echo $ACCOUNT_CONTAINER_NAME):$(echo $ACCOUNT_PORT) -e SECRET_KEY=${{ secrets.SECRET_KEY }} -d \
            --restart always \
            --publish $(echo $GATEWAY_PORT):$(echo $GATEWAY_PORT) \
            --name $(echo $GATEWAY_CONTAINER_NAME) \
            --network $(echo $NETWORK_NAME) \
            $(echo $REGISTRY)/$(echo $GATEWAY_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
